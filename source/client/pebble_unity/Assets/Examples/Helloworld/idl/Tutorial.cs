/**
 * Autogenerated by Pebble Compiler (0.1.7)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 * Copyright (c) 2015, Tencent Inc. All rights reserved.
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Pebble;
using Pebble.Collections;
using System.Runtime.Serialization;
using Pebble.Protocol;
using Pebble.Transport;

public partial class Tutorial {
    public interface Iface {
        string helloworld(string who);
        #if SILVERLIGHT
        IAsyncResult Begin_helloworld(AsyncCallback callback, object state, string who);
        string End_helloworld(IAsyncResult asyncResult);
        #endif
    }

    public class Client : IDisposable {
        public Client(TProtocol prot) : this(prot, prot)
        {
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            iprot_ = iprot;
            oprot_ = oprot;
            service_name_ = "Tutorial";

        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;
        protected long seqid_;
        protected string service_name_;

        public TProtocol InputProtocol
        {
            get { return iprot_; }
        }
        public TProtocol OutputProtocol
        {
            get { return oprot_; }
        }


        public string ServiceName
        {
            get { return service_name_; } set {service_name_ = value;}
        }


        #region " IDisposable Support "
        private bool _IsDisposed;

        // IDisposable
        public void Dispose()
        {
            Dispose(true);
        }
        

        protected virtual void Dispose(bool disposing)
        {
            if (!_IsDisposed)
            {
                if (disposing)
                {
                    if (iprot_ != null)
                    {
                        ((IDisposable)iprot_).Dispose();
                    }
                    if (oprot_ != null)
                    {
                        ((IDisposable)oprot_).Dispose();
                    }
                }
            }
            _IsDisposed = true;
        }
        #endregion


        
        public void helloworld(string who, Action<Exception, string> callback)
        {
            var ars = new AsyncRpcSessoin((ex) => {
                if (ex != null) {
                    callback(ex, default(string));
                    return 0;
                }
                helloworld_result result = new helloworld_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    callback(null, result.Success);
                } else {
                    callback(new TApplicationException(TApplicationException.ExceptionType.MissingResult, "helloworld failed: unknown result"), default(string));
                }
                return 0;
            }, -1);

            long sid = Rpc.Instance.AddNewSession (ars);

            oprot_.WriteMessageBegin(new TMessage("Tutorial:helloworld", TMessageType.Call, sid));
            helloworld_args args = new helloworld_args();
            args.Who = who;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
            oprot_.Transport.ServiceName = service_name_;
            oprot_.Transport.Flush();
        }

    }
    public class Processor : TProcessor {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_["helloworld"] = helloworld_Process;
        }

        virtual public string ServiceName()
        {
            return "Tutorial";
        }


        protected delegate void ProcessFunction(long seqid, TProtocol iprot, TProtocol oprot);
        private Iface iface_;
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public bool Process(TProtocol iprot, TProtocol oprot)
        {
            try
            {
                TMessage msg = iprot.ReadMessageBegin();
                ProcessFunction fn;
                processMap_.TryGetValue(msg.Name, out fn);
                if (fn == null) {
                  TProtocolUtil.Skip(iprot, TType.Struct);
                  iprot.ReadMessageEnd();
                  TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                  oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                  x.Write(oprot);
                  oprot.WriteMessageEnd();
                  oprot.Transport.Flush();
                  return true;
                }
                fn(msg.SeqID, iprot, oprot);
            }
            catch (IOException)
            {
                return false;
            }
            return true;
        }

        public void helloworld_Process(long seqid, TProtocol iprot, TProtocol oprot)
        {
            helloworld_args args = new helloworld_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            helloworld_result result = new helloworld_result();
            result.Success = iface_.helloworld(args.Who);
            oprot.WriteMessageBegin(new TMessage("Tutorial:helloworld", TMessageType.Reply, seqid)); 
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class helloworld_args : TBase
    {
        private string _who;

        public string Who
        {
            get
            {
                return _who;
            }
            set
            {
                __isset.who = true;
                this._who = value;
            }
        }


        public Isset __isset;
        #if !SILVERLIGHT
        [Serializable]
        #endif
        public struct Isset {
            public bool who;
        }

        public helloworld_args() {
        }

        public void Read (TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop) { 
                    break;
                }
                if (field.ID == -1) {
                    if (field.Name == "who") {
                        field.ID = 1;
                    }
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String) {
                            Who = iprot.ReadString();
                        } else { 
                          TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default: 
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot) {
            TStruct struc = new TStruct("helloworld_args");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Who != null && __isset.who) {
                field.Name = "who";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Who);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString() {
            StringBuilder __sb = new StringBuilder("helloworld_args(");
            bool __first = true;
            if (Who != null && __isset.who) {
                if(!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Who: ");
                __sb.Append(Who);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class helloworld_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
        #if !SILVERLIGHT
        [Serializable]
        #endif
        public struct Isset {
            public bool success;
        }

        public helloworld_result() {
        }

        public void Read (TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop) { 
                    break;
                }
                if (field.ID == -1) {
                    if (field.Name == "success") {
                        field.ID = 0;
                    }
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.String) {
                            Success = iprot.ReadString();
                        } else { 
                          TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default: 
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot) {
            TStruct struc = new TStruct("helloworld_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success) {
                if (Success != null) {
                    field.Name = "success";
                    field.Type = TType.String;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Success);
                    oprot.WriteFieldEnd();
                }
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString() {
            StringBuilder __sb = new StringBuilder("helloworld_result(");
            bool __first = true;
            if (Success != null && __isset.success) {
                if(!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
