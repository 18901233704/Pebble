
main: run task1                                             <--main函数中执行，启动协程task1
coroutine ID[0]:...do part A job...                         <--0号协程获得cpu执行，执行 part A
coroutine ID[0]:blocked, wait for I/O, signal or other      <--0号协程获得cpu执行，执行完这句后协程让出CPU
main: task1 have not finished but yield, so can run here    <--main函数获得cpu，继续往下执行
main: run task2                                             <--main函数获得cpu，启动协程task2
coroutine ID[1]:...do part A job...                         <--1号协程获得cpu执行，执行 part A
coroutine ID[1]:blocked, wait for I/O, signal or other      <--1号协程获得cpu执行，执行完这句后协程让出CPU
main: task2 have not finished but yield, so can run here    <--main函数获得cpu，继续往下执行
main: run task3                                             <--main函数获得cpu，启动协程task3
coroutine ID[2]:...do part A job...                         <--2号协程获得cpu执行，执行 part A
coroutine ID[2]:blocked, wait for I/O, signal or other      <--1号协程获得cpu执行，执行完这句后协程让出CPU
main: task3 have not finished but yield, so can run here    <--main函数获得cpu，继续往下执行
main: task3 is ready, so Resume it                          <--main函数获得cpu，恢复2号协程的执行
coroutine ID[2]:second step into Run() function             <--2号协程获再次获得cpu，执行 part B
coroutine ID[2]:...do part B job...                         <--2号协程执行完该行后正常结束，让出cpu
main: task1 is ready, so Resume it                          <--main函数获得cpu，恢复0号协程的执行
coroutine ID[0]:second step into Run() function             <--0号协程获再次获得cpu，执行 part B
coroutine ID[0]:...do part B job...                         <--0号协程执行完该行后正常结束，让出cpu
main: task2 is ready, so Resume it                          <--main函数获得cpu，恢复1号协程的执行
coroutine ID[1]:second step into Run() function             <--1号协程获再次获得cpu，执行 part B
coroutine ID[1]:...do part B job...                         <--1号协程执行完该行后正常结束，让出cpu，回到main
